apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "ibmdb2.fullname" . }}-server
  labels:
    app.kubernetes.io/component	: server
    {{- include "ibmdb2.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component	: server
      {{- include "ibmdb2.labels" . | nindent 6 }}
  #serviceName: ibmdb2-headless
  template:
    metadata:
      labels:
        app.kubernetes.io/component	: server
        {{- include "ibmdb2.labels" . | nindent 8 }}
    spec:
    {{- if .Values.image.imagePullSecrets }}
      imagePullSecrets:
      {{- range .Values.image.imagePullSecrets }}
        - name: {{ . }}
      {{- end }}
    {{- end }}
      serviceAccount: {{ include "ibmdb2.serviceAccount" . }}
      initContainers:
      - name: "ibmdb2-init"
        image: busybox:1.36.1
        volumeMounts:
        - name: ibmdb2-data
          mountPath: /database
        {{- if .Values.db2.repodb.enable }}
        - name: ibmdb2-repodb
          mountPath: /tmp/custom
        - name: ibmdb2-repodb-rw
          mountPath: /var/custom
        {{- end }}
        command:
        - sh
        - -c
        - chmod a+x /database;
        {{- if .Values.db2.repodb.enable }}
          chmod a+x /var/custom;
          cp /tmp/custom/repodb.sh /var/custom/repodb.sh;
          chmod a+x /var/custom/repodb.sh
        {{- end }}
        {{- if .Values.exchange.enable }}
           chmod 777 /{{.Values.exchange.path}}
        {{- end }}
      volumes:
      {{- if .Values.exchange.enable }}
      - name: nfs-volume
          nfs: 
            server: {{ .Values.exchange.nfs }}
            path: {{ .Values.exchange.mount }}
      {{- end }}
      - name: ibmdb2-data
        persistentVolumeClaim:
          claimName: ibmdb2-data
      {{- if .Values.db2.repodb.enable }}
      - name: ibmdb2-repodb
        configMap:
          name: {{ include "ibmdb2.fullname" $ }}-config
          items: 
          - key: repodb.sh
            path: "repodb.sh"
      - name: ibmdb2-repodb-rw
        emptyDir: {}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
      - name: ibmdb2
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        volumeMounts:
        - name: ibmdb2-data
          mountPath: "/database"
        {{- if .Values.db2.repodb.enable }}
        - name: ibmdb2-repodb-rw
          mountPath: "/var/custom"
        {{- end }}
        {{- if .Values.exchange.enable }}
        - name: nfs-volume
          mountPath: {{ .Values.exchange.mount }}
        {{- end }}
        securityContext:
          privileged: true
        env:
        - name: LICENSE
          value: accept
        - name: DB2INSTANCE
          value: {{ .Values.db2.instance }}
        - name: DB2INST1_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "ibmdb2.secretName" $ }}
              key: password
        - name: BLU
          value: "false"
        - name: ENABLE_ORACLE_COMPATIBILITY
          value: "false"
        - name: DBNAME
          value: ""
        - name: PERSISTENT_HOME
          value: "true"
        - name: HADR_ENABLED
          value: "false"
        ports:
        - containerPort: 50000
          protocol: TCP
        {{- with .Values.resources }}
        resources:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        #livenessProbe:
        #  exec:
        #    command: "db2gcf -s"
        #  initialDelaySeconds: 60
        #  periodSeconds: 60
        #  timeoutSeconds: 60
        #readinessProbe:
        #  exec:
        #    command: "db2gcf -s"
        #  initialDelaySeconds: 20
        #  periodSeconds: 60
        #  timeoutSeconds: 60
  volumeClaimTemplates:
  - metadata:
      name: ibmdb2-data
    spec:
      accessModes:
        - "ReadWriteOnce"
      resources:
        requests:
          storage: {{ .Values.db2.storage }}